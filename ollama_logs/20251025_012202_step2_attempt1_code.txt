from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    NoSuchElementException,
    ElementClickInterceptedException,
    TimeoutException,
)
import time

# assume driver is already on the job page and modal is visible
wait = WebDriverWait(driver, 15)

def click_autofill_with_resume():
    clicked = False

    # Strategy 1: direct CSS selector using data-automation-id (first visible instance)
    try:
        autofill_link = wait.until(
            EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "a[data-automation-id='autofillWithResume']")
            )
        )
        driver.execute_script(
            "arguments[0].scrollIntoView({block: 'center'});", autofill_link
        )
        time.sleep(1)
        driver.execute_script("arguments[0].click();", autofill_link)
        print("✓ Clicked 'Autofill with Resume' (first instance) via CSS selector")
        clicked = True
    except (TimeoutException, NoSuchElementException):
        pass
    except Exception as e:
        print(f"✗ Exception during first click attempt: {e}")

    # Strategy 2: if multiple matches, pick the first visible one via XPath
    if not clicked:
        try:
            autofill_links = driver.find_elements(
                By.XPATH, "//a[contains(@data-automation-id, 'autofillWithResume')]"
            )
            for link in autofill_links:
                if link.is_displayed() and link.is_enabled():
                    driver.execute_script(
                        "arguments[0].scrollIntoView({block: 'center'});", link
                    )
                    time.sleep(1)
                    try:
                        link.click()
                    except ElementClickInterceptedException:
                        driver.execute_script("arguments[0].click();", link)
                    print("✓ Clicked 'Autofill with Resume' (first visible instance) via XPath")
                    clicked = True
                    break
        except Exception as e:
            print(f"✗ Exception during fallback XPath click: {e}")

    # Strategy 3: generic text search as last resort
    if not clicked:
        try:
            element = driver.find_element(
                By.XPATH, "(//*[contains(text(),'Autofill with Resume')])[1]"
            )
            driver.execute_script(
                "arguments[0].scrollIntoView({block: 'center'});", element
            )
            time.sleep(1)
            driver.execute_script("arguments[0].click();", element)
            print("✓ Clicked 'Autofill with Resume' via generic text search")
            clicked = True
        except Exception as e:
            print(f"✗ Could not click 'Autofill with Resume': {e}")

    if not clicked:
        print("✗ Failed to click the 'Autofill with Resume' button after all strategies")

# Execute the function
click_autofill_with_resume()
time.sleep(2)  # allow any navigation or modal transition to settle