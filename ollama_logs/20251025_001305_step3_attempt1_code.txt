wait = WebDriverWait(driver, 15)
clicked = False

# Strategy 1: Click by data-automation-id
try:
    autofill_elem = wait.until(
        EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "a[data-automation-id='autofillWithResume'], button[data-automation-id='autofillWithResume']")
        )
    )
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", autofill_elem)
    time.sleep(1)
    driver.execute_script("arguments[0].click();", autofill_elem)
    print("✓ Clicked 'Autofill with Resume' via data-automation-id")
    clicked = True
except Exception as e:
    print(f"✗ Strategy 1 failed: {e}")

# Strategy 2: Click by visible text within modal
if not clicked:
    try:
        autofill_elem = wait.until(
            EC.element_to_be_clickable(
                (By.XPATH, "//a[contains(text(),'Autofill with Resume') or button[contains(text(),'Autofill with Resume')]]")
            )
        )
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", autofill_elem)
        time.sleep(1)
        driver.execute_script("arguments[0].click();", autofill_elem)
        print("✓ Clicked 'Autofill with Resume' via text")
        clicked = True
    except Exception as e:
        print(f"✗ Strategy 2 failed: {e}")

# Strategy 3: Generic clickable element containing the text
if not clicked:
    try:
        autofill_elem = driver.find_element(
            By.XPATH, "//*[contains(text(),'Autofill with Resume')][1]"
        )
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", autofill_elem)
        time.sleep(1)
        driver.execute_script("arguments[0].click();", autofill_elem)
        print("✓ Clicked 'Autofill with Resume' via generic element")
        clicked = True
    except Exception as e:
        print(f"✗ Strategy 3 failed: {e}")

if not clicked:
    print("✗ Could not click the 'Autofill with Resume' button.")