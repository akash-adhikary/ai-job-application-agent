import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    NoSuchElementException,
    ElementClickInterceptedException,
    TimeoutException,
)

# Assume `driver` is already instantiated and navigated to the job page
wait = WebDriverWait(driver, 15)

def click_apply():
    clicked = False

    # 1️⃣ Accept cookies if a consent banner is present
    try:
        consent_btn = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Accept') or contains(text(),'Agree')]"))
        )
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", consent_btn)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", consent_btn)
        print("✓ Cookie consent accepted")
    except (TimeoutException, NoSuchElementException):
        pass  # No consent banner found

    # 2️⃣ Strategy 1 – Direct link with data‑automation‑id (Workday style)
    try:
        apply_link = wait.until(
            EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "a[data-automation-id*='apply'], a[data-automation-id*='Apply'], a[role='button']")
            )
        )
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", apply_link)
        time.sleep(1)
        driver.execute_script("arguments[0].click();", apply_link)
        print("✓ Clicked Apply link (JavaScript)")
        clicked = True
    except Exception:
        pass

    # 3️⃣ Strategy 2 – Visible button with text "Apply"
    if not clicked:
        try:
            button = wait.until(
                EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(translate(text(),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'apply')]")
                )
            )
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
            time.sleep(0.5)
            try:
                button.click()
                print("✓ Clicked Apply button (normal click)")
            except ElementClickInterceptedException:
                driver.execute_script("arguments[0].click();", button)
                print("✓ Clicked Apply button (JavaScript fallback)")
            clicked = True
        except Exception:
            pass

    # 4️⃣ Strategy 3 – Div or span with role=button containing "Apply"
    if not clicked:
        try:
            div_btn = driver.find_element(
                By.XPATH,
                "//*[(@role='button' or @role='link') and contains(translate(text(),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'apply')]"
            )
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", div_btn)
            time.sleep(0.5)
            driver.execute_script("arguments[0].click();", div_btn)
            print("✓ Clicked Apply element (JavaScript)")
            clicked = True
        except Exception:
            pass

    # 5️⃣ Strategy 4 – Fallback: first element in DOM that has the word "Apply"
    if not clicked:
        try:
            fallback = driver.find_element(
                By.XPATH,
                "//*[contains(translate(text(),'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'),'apply')][1]"
            )
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", fallback)
            time.sleep(0.5)
            driver.execute_script("arguments[0].click();", fallback)
            print("✓ Clicked fallback Apply element (JavaScript)")
            clicked = True
        except Exception as e:
            print(f"✗ Could not click Apply button: {e}")

    if not clicked:
        raise RuntimeError("Failed to locate and click the Apply button.")

# Execute the action
click_apply()
time.sleep(2)  # give the next page a moment to load